Module 3 - Compose & Swarm , UI 

**install docker compose 

--ubuntu   
    apt-get update && apt-get install python-pip
--centos 
    yum -y install python-pip
--mac 
    python pip by default available 
--windows 
    https://docs.docker.com/compose/install/

**setup 
    "pip-install docker-compose"

    docker-compose up -d 
    docker-compose up
    docker-compose up -f <file>.yaml 
    docker-compose up modulename

docker-compose -f app-def.yml -f prod.yml up -d
docker-compose -f app-def.yml -f stg.yml up -d

REPLICA SET  --> 4, at any point of time 4 containers are always up and running,  
AUTOSCALER   --> 4, add the containers on demand. 


Docker-compose.yaml file 

wordpress:
     image: wordpress
     links:
       - wordpress_db:mysql
      ports:
       - "8080:80"

wordpress_db
 image: mariadb
 environment: 
  MYSQL_ROOT_PASSWORD: edureka 
phpmyadmin:
 image: corbinu/docker-phpmyadmin
 links:
 - wordpress_db:mysql
 ports:
 - 8181:80
 environment: 
  MYSQL_USERNAME: root
  MYSQL_ROOT_PASSWORD: edureka 








**swarm 

    Demo in WIndows = you need toolbox and then you can spin up docker-machines. 
    Demo in Linux = You need multiple vms and then install seperately (daemon)

    However in case multiple vms are not available , install docker toolbox and create 
    docker machines which are as good as vms. 

    docker-machines can run on different hypervizors, kvm, virtualbox,hyper-v

Docker Machine Commands. 

docker-machine ls                                          --> List the Docker Machines 
docker-machine create --driver virtualbox <name>           --> create a docker machine

Example:- 
		docker-machine create --driver virtualbox master 
		docker-machine create --driver virtualbox node1 
		docker-machine create --driver virtualbox node2 

		docker-machine create --driver kvm node2

docker-machine start <name>                               --> start the docker machine. 
                     name1 name2 name3 
docker-machine stop <name>                                --> stop the docker machine. 
eval ${docker-machine env manager}      --> will execute a command inside the docker machine 
eval ${docker-machine env -u}
docker-machine ssh <name>               --> ssh the docker-machine. 
docker-machine regenerate-certs <name>                    --> regenerate the certs for dms
docker-machine rm <name>                --> remove the docker machine 


 --step-1
    docker-machine ssh master 
    "docker swarm init --advertise-addr 192.168.99.104 --listen-addr 0.0.0.0"
    Once initialized - Note down the Token Number generated by the system.
 
 --step-2

    docker-machine ssh node1 "docker swarm join-token worker"
	docker-machine env master
	# note the last line of the Env and run the last line in prompt)
	docker-machine ls 
	(Note the active machine status)
	docker node ls  

  --step-3
    docker-machine ssh node2 "docker swarm join --token {{tokenid from Step 4}}"
    docker node ls

    In case if you have forgotten the token 
    docker-machine ssh node2 "docker swarm join-token worker"

  --step-4 
    docker-machine env master
    Look for last line (Run command to configure your shell and execute the line)
  
  --step-5
    docker-machine ls
    Once run, the current machine (VM) will be running machine
    docker network ls
    Do you see Swarm status ?

  --step-6 
    # is performance coming down - then shift to default machine
	docker-machine env default
	run the last line..
	docker-machine ls
    
    More commands on Docker Swarm 

    docker node ls 
    docker node demote <node name>
    docker node inspect <node-name>
    docker node promote <node-name>
    docker node ps                       (List the running containers)
    docker node rm  <node>               (remove a stopped node)
    docker node rm --force <node-name>   (remove the Active Node as well forcefully) 

** see Bonus swarm with cluster (Bonus Lecture)

PROD/CLoud - container gives, docker run /exec into and 
ABAC 

**command to run the Docker UI 

docker run -d -p 9000:9000 --privileged -v /var/run/docker.sock:/var/run/docker.sock uifd/ui-for-docker 


Phanis-MacBook-Air:Devops-Labs phanikishorelanka$ docker-machine create --driver virtualbox master
Running pre-create checks...
Creating machine...
(master) Copying /Users/phanikishorelanka/.docker/machine/cache/boot2docker.iso to /Users/phanikishorelanka/.docker/machine/machines/master/boot2docker.iso...
(master) Creating VirtualBox VM...
(master) Creating SSH key...
(master) Starting the VM...
(master) Check network to re-create if needed...
(master) Waiting for an IP...

Waiting for machine to be running, this may take a few minutes...
Detecting operating system of created instance...
Waiting for SSH to be available...
Detecting the provisioner...
Provisioning with boot2docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env master



4 editions. 

1. enterprise 
2. ce 
    2.a desktop
    2.b toolbox 
3. cloud edition --> enterprise cloud. 

** OCI - Open Container Initiative. 
OS Container. 
DOcker container. 
IBM(containers), Oracle, HP, ------- 

