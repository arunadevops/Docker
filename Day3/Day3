Module 3 - Compose & Swarm , UI 

**install docker compose 

--ubuntu   
    apt-get update && apt-get install python-pip
--centos 
    yum -y install python-pip
--mac 
    python pip by default available 
--windows 
    https://docs.docker.com/compose/install/

**setup 
    "pip-install docker-compose"

    docker-compose up -d 
    docker-compose up
    docker-compose up -f <file>.yaml 
    docker-compose up modulename

**swarm 
    Demo of Docker Swarm, You need multiple VMS , each vm has a docker deamon running, 
    you join all into cluster. 

    However in case multiple vms are not available , install docker toolbox and create 
    docker machines which are as good as vms. 

 --step-1
    docker-machine ssh myv1 "docker swarm init --advertise-addr <<docker-machine Master IP>>"
    Once initialized - Note down the Token Number generated by the system.
 
 --step-2

    docker-machine ssh mymach1 "docker swarm join-token worker"
	docker-machine env mymach1
	# note the last line of the Env and run the last line in prompt)
	docker-machine ls 
	(Note the active machine status)
	docker node ls  

  --step-3
    docker-machine ssh myv2 "docker swarm join --token {{tokenid from Step 4}}"
    docker node ls

    In case if you have forgotten the token 
    docker-machine ssh myv1 "docker swarm join-token worker"

  --step-4 
    docker-machine env myv1
    Look for last line (Run command to configure your shell and execute the line)
  
  --step-5
    docker-machine ls
    Once run, the current machine (VM) will be running machine
    docker network ls
    Do you see Swarm status ?

  --step-6 
    # is performance coming down - then shift to default machine
	docker-machine env default
	run the last line..
	docker-machine ls
 
  --step-7

	Create a directory newnet-comp

Create docker-compose.yml
===========================
version: '3'
services:
  redis:
    image: redis:alpine
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "50M"
        reservations:
          cpus: "0.25"
          memory: "20M"
      mode: replicated
      replicas: 6


   --step-8

	#Prior deployment , you need to ensure you are in Leader machine 
	docker-machine env mymach1
	(run the last command)
	docker stack deploy -c docker-compose.yml mydckswarmimg

   --step-9
   docker ps -a 
	(Do you see any ?)

	docker stack ps mydckswarmimg
	To access these containers - you can visit the containers by docker exec -it and check for usage.

   --step-10

	#Now , Lets shut down one machine down and see how distribution happen

	docker-machine ssh myv "docker swarm leave --force"

	docker stack ps mydckswarmimg
	# Refer the column of current state and 
	# Do you see error description saying no image in Redis .. The recommendation is to have the image in each of the docker-machine so that it can run. Just pull the respective images in the docker-machine.

	docker-machine ssh mymach2 "docker swarm leave --force"

   --step-11

	docker stack rm mydckswarmimg
	docker stack ls
	docker network prune

	docker-machine env default
